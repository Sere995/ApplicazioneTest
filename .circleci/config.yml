version: 2
jobs:
  build:

    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha

    services:
      - docker:dind
    variables:
      DOCKER_DRIVER: overlay
      GCP_PROJECT_ID: CHANGE-TO-GCP-PROJECT-ID
      IMAGE_NAME: image_id
    environment:
      JVM_OPTS: -Xmx3200m
    stages:
      - publish

    publish:
      stage: publish
      before-script:
        # Install CA certs, openssl to https downloads, python for gcloud sdk
        - apk add --update make ca-certificates openssl python
        - update-ca-certificates
        # Write our GCP service account private key into a file
        - echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
        # Download and install Google Cloud SDK
        - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
        - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
        - google-cloud-sdk/bin/gcloud --quiet components update
        - google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
        # Create our image. Expected to create an image 'image_id'
        - make-my-image
        # Tag our image for container registry
        - docker tag $IMAGE_NAME gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME
        # Optionally tag the image with the commit short-sha
        - docker tag $IMAGE_NAME gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:$(echo $CI_COMMIT_SHA | cut -c1-8)
        - google-cloud-sdk/bin/gcloud docker -- push gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:latest
        - google-cloud-sdk/bin/gcloud docker -- push gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:$(echo $CI_COMMIT_SHA | cut -c1-8)
      # Only run builds for these refs
      script:
        - docker build -t $IMAGE_NAME .
        - docker tag $IMAGE_NAME "us.gcr.io/$GCLOUD_PROJECT_ID/$IMAGE_NAME"
        - docker push "us.gcr.io/$GCLOUD_PROJECT_ID/$IMAGE_NAME:latest"
      only:
        - master
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      #      - run:
      #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
      #         command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Build debug APK and release APK
          command: |
              ./gradlew :app:assembleDebug
              ./gradlew :app:assembleDebugAndroidTest
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
               gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
               gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Test with Firebase Test Lab
          command: >
              sudo gcloud firebase test android run \
                --app <local_server_path>/<app_apk>.apk \
                --test <local_server_path>/<app_test_apk>.apk \
                --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
      - run:
          name: Install gsutil dependency and copy test results data
          command: |
              sudo pip install -U crcmod
              sudo gsutil -m cp -r -U `sudo gsutil ls gs://[BUCKET_NAME]/[OBJECT_NAME] | tail -1` ${CIRCLE_ARTIFACTS}/ | true
      - run:
          name: Run Tests
          command: ./gradlew lint test
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples